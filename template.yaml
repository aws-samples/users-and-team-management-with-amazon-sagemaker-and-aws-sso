# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon SageMaker SAML backend. This stack creates a SAML backend API and Lambda functions to suppport a custom SAML application

Metadata:
  AWS::ServerlessRepo::Application:
    Name: amazon-sagemaker-saml-backend
    Description: Custom SAML application backend for Amazon SageMaker Studio
    Author: ilyiny
    SpdxLicenseId: MIT
    LicenseUrl: ./LICENSE
    ReadmeUrl: ./README.md
    Labels: ['amazon', 'sagemaker', 'studio', 'saml', 'sso']
    HomePageUrl: https://gitlab.aws.dev/ilyiny/amazon-sagemaker-team-and-user-management-sso
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://gitlab.aws.dev/ilyiny/amazon-sagemaker-team-and-user-management-sso

Globals:
  Function:
    Runtime: python3.8
    MemorySize: 128
    Timeout: 60
    Environment:
      Variables:
        LOG_LEVEL: INFO
    Tags:
      Project: amazon-sagemaker-saml-backend

Outputs:
  SageMakerDomainId:
    Description: SageMaker Domain Id
    Value: !If 
      - CreateSageMakerDomainCondition
      - !GetAtt SageMakerDomain.Outputs.SageMakerDomainId
      - !Ref SageMakerDomainId
    Export:
      Name: 'sagemaker-domain-id'

  SAMLBackendEndpoint:
    Description: "API Gateway endpoint URL acting as the Application ACS URL"
    Value: !Sub "https://${SageMakerDomainSAMLAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/saml"
  
  SAMLAudience:
    Description: "Application SAML audience"
    Value: !Sub "https://${SageMakerDomainSAMLAPI}.execute-api.${AWS::Region}.amazonaws.com/"    

  SageMakerStudioExecutionRoleTeam1Arn:
    Description: The ARN of the SageMaker Team1 execution role
    Value: !GetAtt IAM.Outputs.SageMakerStudioExecutionRoleTeam1Arn
  
  SageMakerStudioExecutionRoleTeam2Arn:
    Description: The ARN of the SageMaker Team2 execution role
    Value: !GetAtt IAM.Outputs.SageMakerStudioExecutionRoleTeam2Arn
  
Parameters:
  EnvironmentName:
    Type: String
    AllowedPattern: '[a-z0-9\-]*'
    Default: 'sagemaker-team-mgmt-sso'
    Description: Your Amazon SageMaker environment name

  SageMakerDomainId:
    Type: String
    AllowedPattern: '[a-z0-9\-]*'
    Default: ''
    Description: Existing Amazon SageMaker domain id. Leave empty to create a new domain.

  CreatePrivateSubnets:
    AllowedValues:
      - 'YES'
      - 'NO'
    Default: 'YES'
    Description: Set to NO when you want to re-use existing subnets in the existing VPC (existing VPC Id must be provided in ExistingVPCId).
    Type: String

  ExistingVPCId:
    Type: String
    Description: Choose a VPC for SageMaker Studio. Leave empty to create a new VPC.
    Default: ''

  SAMLBackendSubnetId:
    Type: String
    Description: Existing private subnet id for SAML backend. Leave empty if CreatePrivateSubnets = YES
    Default: ''

  SageMakerDomainSubnetId:
    Type: String
    Description: Choose subnet for SageMaker domain. Leave empty if if CreatePrivateSubnets = YES
    Default: ''

  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for a new VPC

  SAMLBackendPrivateSubnetCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.0.0.0/19
    Description: CIDR block for a private subnet for SAML backend

  SageMakerDomainPrivateSubnetCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.0.32.0/19
    Description: CIDR block for a private subnet for SageMaker domain

  PublicSubnetCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Type: String
    Default: 10.0.128.0/20
    Description: CIDR block for a public subnet for Internet and NAT Gateways

  DomainAccessAllowedCIDR:
    Type: String
    Default: ''
    Description: Allowed CIDR block for CreatePresignedDomainURL API call. Leave empty to allow access from public internet
  
Conditions:
  ExistingVPCCondition: !Not [ !Equals [ !Ref ExistingVPCId, ''] ]
  CreateSageMakerDomainCondition: !Equals [ !Ref SageMakerDomainId, '' ]

Resources:
  
######## CF Stacks ########
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: cfn-templates/vpc.yaml
      Parameters:
        EnvironmentName : !Ref EnvironmentName
        ExistingVPCId: !Ref ExistingVPCId
        VPCCIDR: !If [ ExistingVPCCondition, !GetAtt GetNetworkConfiguration.VPCCIDR, !Ref VPCCIDR ]
        CreatePrivateSubnets: !Ref CreatePrivateSubnets
        ExistingSAMLBackendPrivateSubnetId: !Ref SAMLBackendSubnetId
        ExistingSageMakerDomainPrivateSubnetId: !Ref SageMakerDomainSubnetId
        SAMLBackendPrivateSubnetCIDR: !Ref SAMLBackendPrivateSubnetCIDR
        SageMakerDomainPrivateSubnetCIDR: !Ref SageMakerDomainPrivateSubnetCIDR
        PublicSubnetCIDR: !Ref PublicSubnetCIDR
      Tags: 
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
      
  IAM:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: cfn-templates/iam.yaml
      Parameters:
        EnvironmentName : !Ref EnvironmentName
        AllowedCIDR: !Ref DomainAccessAllowedCIDR
      Tags: 
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
      
  SageMakerDomain:
    Type: AWS::CloudFormation::Stack
    Condition: CreateSageMakerDomainCondition
    Properties: 
      TemplateURL: cfn-templates/sagemaker-domain.yaml    
      Parameters: 
        EnvironmentName: !Ref EnvironmentName
        VPCId: !GetAtt VPC.Outputs.VPCId
        SageMakerDomainSubnetIds: !GetAtt VPC.Outputs.SageMakerDomainPrivateSubnetId
        SageMakerDomainSecurityGroupIds: !GetAtt VPC.Outputs.SageMakerDomainSecurityGroupId
        SageMakerDefaultExecutionRoleArn: !GetAtt IAM.Outputs.SageMakerStudioExecutionRoleDefaultArn
        SetupLambdaExecutionRoleArn: !GetAtt IAM.Outputs.SetupLambdaExecutionRoleArn
      Tags: 
        - Key: EnvironmentName
          Value: !Ref EnvironmentName

  GetNetworkConfiguration:
    Type: Custom::GetNetworkConfiguration
    Condition: ExistingVPCCondition
    Properties:
      ServiceToken: !GetAtt GetNetworkConfigurationFunction.Arn
      VPCId: !Ref ExistingVPCId

######## API Gateway ########
  SageMakerDomainSAMLAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL

######## Lambda Functions ########
  GetNetworkConfigurationFunction:
    Type: AWS::Serverless::Function 
    Properties:
      ReservedConcurrentExecutions: 1
      CodeUri: functions/get-network-config/
      Role: !GetAtt IAM.Outputs.SetupLambdaExecutionRoleArn
      Handler: get_network_config_function.lambda_handler

  SAMLBackEndFunction:
    Type: AWS::Serverless::Function 
    Properties:
      ReservedConcurrentExecutions: 1
      CodeUri: functions/saml-backend/
      Role: !GetAtt IAM.Outputs.SAMLBackendLambdaExecutionRoleArn
      Handler: saml_backend_function.lambda_handler
      Environment:
        Variables:
          PRESIGNED_URL_EXPIRATION: 5
          SESSION_EXPIRATION: 43200
          KEY_NAME_DOMAIN_ID: 'domainid'
          KEY_NAME_USER_ID: 'ssouserid'
          KEY_NAME_TEAM_ID: 'teamid'
      Events:
        SAMLBackEnd:
          Type: Api
          Properties:
            Auth: 
              ResourcePolicy:
                CustomStatements: !Sub '[{
                                    "Effect": "Allow",
                                    "Principal": "*",
                                    "Action": "execute-api:Invoke",
                                    "Resource": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/prod/POST/saml",
                                    "Condition": {
                                      "IpAddress": {
                                        "aws:SourceIp": "0.0.0.0/0"
                                      }
                                    }
                                  }]'
            Path: /saml
            Method: POST
            RestApiId: !Ref SageMakerDomainSAMLAPI
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.Outputs.SAMLBackendSecurityGroupId
        SubnetIds:
          - !GetAtt VPC.Outputs.SAMLBackendPrivateSubnetId

